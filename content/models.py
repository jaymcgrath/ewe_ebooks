from django.db import models
from sources.models import Corpus
from extras.mashup_algorithms import mouse_join as mj


# Create your models here.
class MashupAlgorithm(models.Model):
    """
    Class of mashup methods and statistics about them
    (managed internally)
    """
    name = models.CharField(max_length=64)
    description = models.TextField()
    usage_count = models.IntegerField(default=0)

    def __str__(self):  # __unicode__ on Python 2
        return self.name

    def __repr__(self):
        return self.name



class Mashup(models.Model):
    """
    Union of multiple sources.Corpus (corpora) and a MashupAlgorithm
    """
    ALGOS = (
        ('MJN', 'Mouse Join'),
    )

    title = models.CharField(max_length=32)
    description = models.TextField()
    corpora = models.ManyToManyField(Corpus, related_name='mashup_set')
    algorithm = models.CharField(max_length=3, choices=ALGOS, default='MJN')


    def __str__(self):  # __unicode__ on Python 2
        return self.title

    def __repr__(self):
        return self.title


class Output(models.Model):
    """
    Instances of text generated by Mashups
    """
    body = models.CharField(max_length=144)
    generated = models.DateTimeField(auto_now=True)
    num_votes = models.PositiveIntegerField(default=0)
    mashup = models.ForeignKey(Mashup, related_name="outputs")

    def save(self, *args, **kwargs):
        """
        Get the mashup algorithm and sources, then do some munging and save it

        :param args:
        :param kwargs:
        :return:
        """

        super().save(*args, **kwargs)

    def __str__(self):  # __unicode__ on Python 2
        return "{m}: {b}.. {v}".format(m=self.mashup.title, b=self.body[:33], v=self.num_votes)

    def __repr__(self):
        return "{m}: {b}.. {v}".format(m=self.mashup.title, b=self.body[:33], v=self.num_votes)






